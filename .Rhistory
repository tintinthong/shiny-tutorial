ggplot(aes(month, fill=delinquint))+ #x = month,
geom_bar(position="dodge")+scale_y_continuous(labels = percent_format())+theme(aspect.ratio = 1, legend.position = "none")
#(applicationDate (quarter) x delinquint x leadType)
vec1<-paste("0",1:3,sep="")
vec2<-paste("0",4:6,sep="")
vec3<-paste("0",7:9,sep="")
vec4<-as.character(10:12)
p2<-dat_loan_tidy %>% separate( applicationDate, into = c("year", "month", "day"), sep="-",remove=FALSE) %>%
mutate(year=as.factor(year), month=as.factor(month))%>%
mutate(quart=fct_collapse(month,quart1=vec1, quart2=vec2, quart3=vec3, quart4=vec4)) %>%
ggplot(aes(quart, fill=delinquint))+ #x = month,
geom_bar(position="dodge")+
scale_y_continuous(labels = percent_format())+theme(aspect.ratio = 1, legend.position = "none")
pp<-list(p1,p2)
do.call("grid.arrange", c(pp, ncol=2))
dat_mod2<-dat_loan_tidy %>%
group_by(anon_ssn) %>% mutate(Nanon_ssn=n(),n_anon=sum(delinquint=="Delinquint"))  %>%
mutate(prop_anon=n_anon/Nanon_ssn)%>% ungroup()%>%
separate( applicationDate, into = c("year", "month", "day"), sep="-",remove=FALSE) %>%
mutate(year=as.factor(year), month=as.factor(month))%>%
mutate(quart=fct_collapse(month,quart1=vec1, quart2=vec2, quart3=vec3, quart4=vec4))%>%
mutate(apr= cut(apr,breaks=c(-Inf,40,60,80,100, Inf), include.lowest=TRUE))%>%
select(vec_num,vec_fac2, year,month, state, delinquint, prop_anon)
mod2<-glm(delinquint~.,dat_mod2, family="binomial")
summary(mod2)
BIC(mod2)
score<-predict(mod2,type="response")
dat_predict<-data.frame( outcome= ifelse(score>0.5, "NonDelinquint", "Delinquint") )
dat_predict%>% ggplot(aes(outcome,fill=outcome)) +geom_bar(col="black")
dat_predict %>%group_by(outcome)%>% summarise(n=n())%>% mutate(prop=n/sum(n))
confusionMatrix(dat_predict$outcome,dat_mod2$delinquint)
score
dat_loan_tidy %>%
group_by(anon_ssn) %>% mutate(Nanon_ssn=n(),n_anon=sum(delinquint=="Delinquint"))  %>%
mutate(prop_anon=n_anon/Nanon_ssn)%>% ungroup() %>% select(loanId, anon_ssn, prop_anon, nPaidOff,delinquint) %>% arrange(anon_ssn)%>%View()
shiny::runApp('Documents/GitHub/hugo/main')
shiny::runApp('Documents/GitHub/word-graph')
shiny::runApp('Documents/GitHub/word-graph')
library(shiny)
runExample("08_html")
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
itlePanel("Hello Shiny!")
titlePanel("Hello Shiny!")
class(titlePanel("Hello Shiny!"))
tags
names(tags)
tags
tags$wbr()
tags$div()
tags$embed()
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
htmlOutput("summary")
uiOutput("summary")
# Using a custom container and class
tags$ul(
htmlOutput("summary", container = tags$li, class = "custom-li-output")
)
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
install.packages('shinyjqui')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp("newdir")
# create a textInput in shiny ui
ui <- fluidPage(
titlePanel("Hugo's App!"),
textInput('foo', 'Input')
)
server <- function(input, output) {
# Reactive expression to generate the requested distribution ----
# This is called whenever the inputs change. The output functions
# defined below then use the value computed from this expression
d <- reactive({
dist <- switch(input$dist,
norm = rnorm,
unif = runif,
lnorm = rlnorm,
exp = rexp,
rnorm)
dist(input$n)
})
# Generate a plot of the data ----
# Also uses the inputs to build the plot label. Note that the
# dependencies on the inputs and the data reactive expression are
# both tracked, and all expressions are called in the sequence
# implied by the dependency graph.
output$plot <- renderPlot({
dist <- input$dist
n <- input$n
hist(d(),
main = paste("r", dist, "(", n, ")", sep = ""),
col = "#75AADB", border = "white")
})
# Generate a summary of the data ----
output$summary <- renderPrint({
summary(d())
})
# Generate an HTML table view of the head of the data ----
output$table <- renderTable({
head(data.frame(x = d()))
})
#output$col1<-c(1,2,3)
#output$col2<-c(4,5,6)
#jqui_draggable(ui = '#foo')
}
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
numericInput("obs", "Observations:", 10, min = 1, max = 100),
verbatimTextOutput("value")
)
server <- function(input, output) {
output$value <- renderText({ input$obs })
}
shinyApp(ui, server)
}
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph/tutorial')
rm(list=ls())
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
res <- lapply(1:5, function(i) input[[paste0('a', i)]])
res <- lapply(1:5, function(i) paste('a',i))
res
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
str(res)
x=list()
x
res <- lapply(1:5, function(i) x[[paste0('a', i)]])
res
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
shiny::runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph/tutorial')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph/tutorial')
str(res)
str(res)
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
word_graph<-matrix(rep(NA,4))
word_graph
runApp('Documents/GitHub/word-graph')
word_graph<-matrix(rep(NA,12),ncol=3)
word_graph
word_graph<-matrix(rep(NA,12),ncol=3)
word_graph
word_obj
word_obj<- list(
col1=c(1,2,3),
col2=c(4,2),
col3=c(1,2,4,5)
)
word_obj
source('~/Documents/GitHub/word-graph/test.R', echo=TRUE)
for(i in word_obj){
print(i)
}
for(div in word_obj){
for(word in div){
print(word)
}
}
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
paste(x,10)
paste0(x,10)
paste(x,10)
paste(x,"hello")
paste(x)
paste0(1:12)
paste(month.abb, "is the", nth, "month of the year.")
(nth <- paste0(1:12, c("st", "nd", "rd", rep("th", 9))))
paste0(10,"th")
paste0(x,"th")
x<-10
paste0(x,"th")
res <- lapply(1:5, function(i) input[[paste0('a', i)]])
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/shiny-tutorial/Untitled.R')
runApp('Documents/GitHub/shiny-tutorial/Untitled.R')
runApp('Documents/GitHub/shiny-tutorial/Untitled.R')
runApp('Documents/GitHub/shiny-tutorial/Untitled.R')
runApp('Documents/GitHub/shiny-tutorial/Untitled.R')
runApp('Documents/GitHub/shiny-tutorial/Untitled.R')
runApp('Documents/GitHub/shiny-tutorial/Untitled.R')
runApp('Documents/GitHub/shiny-tutorial/Untitled.R')
runApp('Documents/GitHub/shiny-tutorial/Untitled.R')
runApp('Documents/GitHub/shiny-tutorial/Untitled.R')
runApp('Documents/GitHub/shiny-tutorial/Untitled.R')
runApp('Documents/GitHub/shiny-tutorial/Untitled.R')
runApp('Documents/GitHub/shiny-tutorial/Untitled.R')
runApp('Documents/GitHub/shiny-tutorial/Untitled.R')
runApp('Documents/GitHub/shiny-tutorial/Untitled.R')
runApp('Documents/GitHub/shiny-tutorial/Untitled.R')
runApp('Documents/GitHub/shiny-tutorial/Untitled.R')
runApp('Documents/GitHub/shiny-tutorial/Untitled.R')
runApp('Documents/GitHub/shiny-tutorial/Untitled.R')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
word_obj<- list(
col1=c("whatever","wub","win"),
col2=c("hello","nihao"),
col3=c("bird ","eagle","albatross")
)
word_obj[[1]]
word_obj[1]
word_obj$col1
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
length(word_obj)
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
paste0('x',c(1,23))
runApp('Documents/GitHub/word-graph')
word_mat<-matrix(c('whatever','hello','bird'),
c('wub','nihao','eagle'),
'win',NA,'albatross')
word_mat<-matrix(c('whatever','hello','bird'),
c('wub','nihao','eagle'),
c('win',NA,'albatross'))
word_mat<-matrix(c('whatever','hello','bird'),
c('wub','nihao','eagle'),
c('win',NA,'albatross'),byrow=TRUE)
word_mat<-matrix(c('whatever','hello','bird',
,'wub','nihao','eagle',
,'win',NA,'albatross'),
ncol=3,byrow=TRUE)
word_mat<-matrix(c('whatever','hello','bird',
'wub','nihao','eagle',
'win',NA,'albatross'),
ncol=3,byrow=TRUE)
word_mat
word_mat[1,2]
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/word-graph')
runApp('Documents/GitHub/shiny-tutorial/shiny-tutorial')
runApp('Documents/GitHub/shiny-tutorial/shiny-tutorial')
runApp('Documents/GitHub/shiny-tutorial/shiny-tutorial')
runApp('Documents/GitHub/shiny-tutorial/shiny-tutorial')
runApp('Documents/GitHub/shiny-tutorial/shiny-tutorial')
runApp('Documents/GitHub/shiny-tutorial/shiny-tutorial')
runApp('Documents/GitHub/shiny-tutorial/shiny-tutorial')
runApp('Documents/GitHub/shiny-tutorial/shiny-tutorial')
runApp('Documents/GitHub/shiny-tutorial/shiny-tutorial')
runApp('Documents/GitHub/shiny-tutorial/shiny-tutorial')
runApp('Documents/GitHub/shiny-tutorial/shiny-tutorial')
runApp('Documents/GitHub/shiny-tutorial/shiny-tutorial')
runApp('Documents/GitHub/shiny-tutorial/shiny-tutorial')
rm(list=ls())
shiny::runApp('Documents/GitHub/shiny-tutorial')
runExample("01")
runExample("01_hello")
runExample("01_hello") #
runExample("02_text")
runExample("02_text") #changing number of rows of data set exposed
runExample("03_text")
runExample("03_text")
runExample("03_reactivity")
library(shiny)
runExample("01_hello") #changing histogram based on bin size
runApp('Documents/GitHub/shiny-tutorial')
library(shiny); runApp('appSchool.R')
runApp('appSchool.R')
runApp('appSchool.R')
runApp('appSchool.R')
runApp('appSchool.R')
ui <- fluidPage(
titlePanel("Scores for Students"),
sidebarLayout(
sidebarPanel(
wellPanel(
sliderInput("E","Mark for E",10,min=1, max=100),
sliderInput("D","Mark for D",20,min=1, max=100),
sliderInput("C","Mark for C",40,min=1, max=100),
sliderInput("B","Mark for B",60,min=1, max=100),
sliderInput("A","Mark for A",80,min=1, max=100)
),
fileInput("file","File Uploader"),
helpText("Upload your csv file here")
),
mainPanel(
#The minimum scores for everything
E=reactive({input$E}) #curly braces takes a reactive expression
D=reactive({input$D})
D=reactive({input$D})
D=reactive({input$D})
D=reactive({input$D})
)
)
)
runApp('appSchool.R')
runApp('appSchool.R')
runApp('appSchool.R')
runApp('appSchool.R')
mtcars
data
data()
AirPassengers
runApp('appSchool.R')
runApp('appSchool.R')
runApp('Documents/GitHub/shiny-tutorial/appSchool.R')
runApp('Documents/GitHub/shiny-tutorial/appSchool.R')
runApp('Documents/GitHub/shiny-tutorial/appSchool.R')
runApp('Documents/GitHub/shiny-tutorial/appSchool.R')
runApp('Documents/GitHub/shiny-tutorial/appSchool.R')
runApp('Documents/GitHub/shiny-tutorial/appSchool.R')
runApp('Documents/GitHub/shiny-tutorial/appSchool.R')
runApp('Documents/GitHub/shiny-tutorial/appSchool.R')
runApp('Documents/GitHub/shiny-tutorial/appSchool.R')
setwd("~/Documents/GitHub/shiny-tutorial")
runApp('appSchool.R')
runApp('appSchool.R')
runApp('appSchool.R')
runApp('appSchool.R')
runApp('appSchool.R')
runApp('appSchool.R')
runApp('appSchool.R')
runApp('appSchool.R')
runApp('appSchool.R')
runApp('appSchool.R')
runApp('appSchool.R')
runApp('appSchool.R')
fivenum(100)
paste(fivenum(100),"quantile")
seq(0,1,0.25)
seq(0,0.75,0.25)
paste(fivenum(100),seq(0,1,0.25))
runApp('appSchool.R')
